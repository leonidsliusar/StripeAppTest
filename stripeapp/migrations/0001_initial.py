# Generated by Django 4.2.7 on 2023-12-01 15:15

import datetime
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Discount",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        choices=[("usd", "Dollar"), ("eur", "Euro"), ("rub", "Rub")],
                        default="usd",
                    ),
                ),
                (
                    "percent_off",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(100),
                        ]
                    ),
                ),
                (
                    "max_redemptions",
                    models.IntegerField(
                        blank=True,
                        help_text="The max_redemptions and redeem_by values apply to the coupon across every application. For example, you can restrict a coupon to the first 50 usages of it, or you can make a coupon expire by a certain date.",
                        null=True,
                    ),
                ),
                (
                    "redeem_by",
                    models.DateTimeField(
                        blank=True,
                        help_text="The max_redemptions and redeem_by values apply to the coupon across every application. For example, you can restrict a coupon to the first 50 usages of it, or you can make a coupon expire by a certain date.",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(
                                limit_value=datetime.datetime(
                                    2028, 11, 29, 0, 34, 26, 405567
                                )
                            )
                        ],
                    ),
                ),
                (
                    "duration",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("once", "Once"),
                            ("repeating", "Repeat"),
                            ("forever", "Forever"),
                        ],
                        default="once",
                        null=True,
                    ),
                ),
                ("duration_in_months", models.IntegerField(blank=True, null=True)),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        help_text="Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
                        null=True,
                    ),
                ),
                ("name", models.CharField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Tax",
            fields=[
                (
                    "id",
                    models.CharField(
                        primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("display_name", models.CharField()),
                ("inclusive", models.BooleanField(default=False)),
                (
                    "percentage",
                    models.DecimalField(
                        decimal_places=3,
                        max_digits=100,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("active", models.BooleanField(default=True)),
                (
                    "country",
                    models.CharField(
                        blank=True,
                        help_text="Two-letter country code (ISO 3166-1 alpha-2)",
                        null=True,
                        validators=[
                            django.core.validators.MinLengthValidator(2),
                            django.core.validators.MaxLengthValidator(2),
                        ],
                    ),
                ),
                ("description", models.CharField(blank=True, null=True)),
                (
                    "jurisdiction",
                    models.CharField(
                        blank=True,
                        help_text="The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice.",
                        null=True,
                    ),
                ),
                (
                    "state",
                    models.CharField(
                        blank=True,
                        help_text="ISO 3166-2 subdivision code, without country prefix. For example, “NY” for New York, United States.",
                        null=True,
                        validators=[
                            django.core.validators.MinLengthValidator(2),
                            django.core.validators.MaxLengthValidator(2),
                        ],
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        help_text="Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
                        null=True,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Item",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField()),
                ("description", models.CharField()),
                (
                    "price",
                    models.IntegerField(
                        validators=[django.core.validators.MinValueValidator(0)]
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Order",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "discount",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="stripeapp.discount",
                    ),
                ),
                ("items", models.ManyToManyField(to="stripeapp.item")),
                (
                    "tax",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="stripeapp.tax",
                    ),
                ),
            ],
        ),
    ]
